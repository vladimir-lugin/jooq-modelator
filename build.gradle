plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'com.gradle.plugin-publish' version '0.10.1'
}

//apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

configurations {
    provided
    compile.extendsFrom provided
}

repositories {
    jcenter()
    mavenCentral()
}

test {
    useJUnitPlatform()
}

project.ext.version = '2.0.2'

task createClasspathManifest {
    def outputDir = file("${buildDir}/${name}")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}
publishing {
    repositories {
        maven {
            url "${nexusRepo}/releases"
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId 'com.mm.idf-jooq-modelator'
            artifactId 'com.mm.idf-jooq-modelator.gradle.plugin'
            version '2.0.2'
            from components.java
        }
    }
}

dependencies {
    compile gradleApi()

    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('net.jodah:failsafe:1.1.1')
    compile('com.spotify:docker-client:8.16.0')
    compile('org.flywaydb:flyway-core:6.0.1')
    compile('org.liquibase:liquibase-core:3.8.0') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compile('org.slf4j:slf4j-simple:1.7.28')

    compile('javax.xml.bind:jaxb-api:2.3.1')
    compile('com.sun.xml.bind:jaxb-core:2.3.0.1')
    compile('javax.activation:activation:1.1.1')
    compile('com.sun.xml.bind:jaxb-impl:2.3.2')

    testCompile('org.junit.jupiter:junit-jupiter-api:5.5.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.5.1')
}

pluginBundle {
    website = 'https://github.com/ayedo/jooq-modelator'
    vcsUrl = 'https://github.com/ayedo/jooq-modelator.git'
    tags = ['jOOQ', 'flyway', 'liquibase', 'migrations', 'metamodel']
    plugins {
        jooqModelatorPlugin {
            id = 'ch.ayedo.jooqmodelator'
            displayName = 'Jooq-Modelator'
            description = 'Plugin to generate the jOOQ metamodel from Flyway & Liquibase migrations.'
            version = project.ext.version
        }
    }
}

